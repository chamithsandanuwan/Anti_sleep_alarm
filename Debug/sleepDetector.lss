
sleepDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000262  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800108  00800108  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084c  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024d  00000000  00000000  000012d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008f  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 19 01 	call	0x232	; 0x232 <main>
  9e:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <readSensorState>:

//// GENERAL ////

unsigned long currentMillis;

void readSensorState(){
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
	if(currentMillis - previousSensorMillis > intervalSensor){
  aa:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <currentMillis>
  ae:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <currentMillis+0x1>
  b2:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <currentMillis+0x2>
  b6:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <currentMillis+0x3>
  ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <previousSensorMillis>
  be:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <previousSensorMillis+0x1>
  c2:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <previousSensorMillis+0x2>
  c6:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <previousSensorMillis+0x3>
  ca:	8a 01       	movw	r16, r20
  cc:	9b 01       	movw	r18, r22
  ce:	08 1b       	sub	r16, r24
  d0:	19 0b       	sbc	r17, r25
  d2:	2a 0b       	sbc	r18, r26
  d4:	3b 0b       	sbc	r19, r27
  d6:	03 33       	cpi	r16, 0x33	; 51
  d8:	11 05       	cpc	r17, r1
  da:	21 05       	cpc	r18, r1
  dc:	31 05       	cpc	r19, r1
  de:	08 f4       	brcc	.+2      	; 0xe2 <readSensorState+0x3c>
  e0:	99 c0       	rjmp	.+306    	; 0x214 <readSensorState+0x16e>
		int SensorState = PINB & (1<<PINB2);
  e2:	83 b1       	in	r24, 0x03	; 3
  e4:	84 70       	andi	r24, 0x04	; 4
  e6:	90 e0       	ldi	r25, 0x00	; 0
		
		if (SensorState == 0 && SensorStatePrevious == 1 && !SensorStateLongTime) {
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	b9 f4       	brne	.+46     	; 0x11a <readSensorState+0x74>
  ec:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <SensorStatePrevious>
  f0:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <SensorStatePrevious+0x1>
  f4:	21 30       	cpi	r18, 0x01	; 1
  f6:	31 05       	cpc	r19, r1
  f8:	81 f4       	brne	.+32     	; 0x11a <readSensorState+0x74>
  fa:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
  fe:	21 11       	cpse	r18, r1
 100:	0c c0       	rjmp	.+24     	; 0x11a <readSensorState+0x74>
			SensorLongMillis = currentMillis;
 102:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <SensorLongMillis>
 106:	50 93 18 01 	sts	0x0118, r21	; 0x800118 <SensorLongMillis+0x1>
 10a:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <SensorLongMillis+0x2>
 10e:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <SensorLongMillis+0x3>
			SensorStatePrevious = 0;
 112:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <SensorStatePrevious+0x1>
 116:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <SensorStatePrevious>
		}
		SensorOutDuration = currentMillis - SensorLongMillis;
 11a:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <SensorLongMillis>
 11e:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <SensorLongMillis+0x1>
 122:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <SensorLongMillis+0x2>
 126:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <SensorLongMillis+0x3>
 12a:	40 1b       	sub	r20, r16
 12c:	51 0b       	sbc	r21, r17
 12e:	62 0b       	sbc	r22, r18
 130:	73 0b       	sbc	r23, r19
 132:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <SensorOutDuration>
 136:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <SensorOutDuration+0x1>
 13a:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <SensorOutDuration+0x2>
 13e:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <SensorOutDuration+0x3>
		
		if (SensorState == 0 && !SensorStateLongTime && SensorOutDuration >= minSensorDuration){
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	b9 f4       	brne	.+46     	; 0x174 <readSensorState+0xce>
 146:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 14a:	21 11       	cpse	r18, r1
 14c:	13 c0       	rjmp	.+38     	; 0x174 <readSensorState+0xce>
 14e:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <minSensorDuration>
 152:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <minSensorDuration+0x1>
 156:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <minSensorDuration+0x2>
 15a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <minSensorDuration+0x3>
 15e:	40 17       	cp	r20, r16
 160:	51 07       	cpc	r21, r17
 162:	62 07       	cpc	r22, r18
 164:	73 07       	cpc	r23, r19
 166:	30 f0       	brcs	.+12     	; 0x174 <readSensorState+0xce>
			SensorStateLongTime = true;
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
			PORTC |= (1<<PORTC0);	//digitalWrite(Relay,HIGH);
 16e:	28 b1       	in	r18, 0x08	; 8
 170:	21 60       	ori	r18, 0x01	; 1
 172:	28 b9       	out	0x08, r18	; 8
		}
		
		if (SensorState == 0 && SensorStateLongTime && SensorOutDuration >= minSensorDuration2) {
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	41 f5       	brne	.+80     	; 0x1c8 <readSensorState+0x122>
 178:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 17c:	22 23       	and	r18, r18
 17e:	21 f1       	breq	.+72     	; 0x1c8 <readSensorState+0x122>
 180:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <SensorOutDuration>
 184:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <SensorOutDuration+0x1>
 188:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <SensorOutDuration+0x2>
 18c:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <SensorOutDuration+0x3>
 190:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1a0:	04 17       	cp	r16, r20
 1a2:	15 07       	cpc	r17, r21
 1a4:	26 07       	cpc	r18, r22
 1a6:	37 07       	cpc	r19, r23
 1a8:	78 f0       	brcs	.+30     	; 0x1c8 <readSensorState+0x122>
			SensorStateLongTime = true;
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
			PORTB |= (1<<PORTB5);	//digitalWrite(buzzer,HIGH);
 1b0:	25 b1       	in	r18, 0x05	; 5
 1b2:	20 62       	ori	r18, 0x20	; 32
 1b4:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	1f ef       	ldi	r17, 0xFF	; 255
 1b8:	29 e6       	ldi	r18, 0x69	; 105
 1ba:	38 e1       	ldi	r19, 0x18	; 24
 1bc:	11 50       	subi	r17, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <readSensorState+0x116>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <readSensorState+0x120>
 1c6:	00 00       	nop
			_delay_ms(1000);
		}
		if (SensorState == 1 && SensorStatePrevious == 0) {
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	a1 f4       	brne	.+40     	; 0x1f4 <readSensorState+0x14e>
 1cc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SensorStatePrevious>
 1d0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <SensorStatePrevious+0x1>
 1d4:	89 2b       	or	r24, r25
 1d6:	71 f4       	brne	.+28     	; 0x1f4 <readSensorState+0x14e>
			SensorStatePrevious = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <SensorStatePrevious+0x1>
 1e0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <SensorStatePrevious>
			SensorStateLongTime = false;
 1e4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			PORTC &= ~(1<<PORTC0);	//digitalWrite(Relay,LOW);
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	8e 7f       	andi	r24, 0xFE	; 254
 1ec:	88 b9       	out	0x08, r24	; 8
			PORTB &= ~(1<<PORTB5);	//digitalWrite(buzzer,LOW);
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8f 7d       	andi	r24, 0xDF	; 223
 1f2:	85 b9       	out	0x05, r24	; 5
		}
		previousSensorMillis = currentMillis;
 1f4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <currentMillis>
 1f8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <currentMillis+0x1>
 1fc:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <currentMillis+0x2>
 200:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <currentMillis+0x3>
 204:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <previousSensorMillis>
 208:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <previousSensorMillis+0x1>
 20c:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <previousSensorMillis+0x2>
 210:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <previousSensorMillis+0x3>
	}
	
}
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 21a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 21c:	f8 94       	cli
	m = timer0_millis;
 21e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <timer0_millis>
 222:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <timer0_millis+0x1>
 226:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer0_millis+0x2>
 22a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer0_millis+0x3>
	SREG = oldSREG;
 22e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
 230:	08 95       	ret

00000232 <main>:

int main(void)
{
	
	DDRB |= (1<<DDB2);
 232:	84 b1       	in	r24, 0x04	; 4
 234:	84 60       	ori	r24, 0x04	; 4
 236:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1<<DDC0);
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	8e 7f       	andi	r24, 0xFE	; 254
 23c:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~(1<<DDB5);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	8f 7d       	andi	r24, 0xDF	; 223
 242:	84 b9       	out	0x04, r24	; 4
	
	
    while (1)
    {
		currentMillis = millis();    // store the current time
 244:	0e 94 0d 01 	call	0x21a	; 0x21a <millis>
 248:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <currentMillis>
 24c:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <currentMillis+0x1>
 250:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <currentMillis+0x2>
 254:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <currentMillis+0x3>
		readSensorState();           // read the sensor state
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <readSensorState>
 25c:	f3 cf       	rjmp	.-26     	; 0x244 <main+0x12>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
